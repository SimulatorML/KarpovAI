[
    {
        "url": [
            "https://www.youtube.com/watch?v=Api2RW4ogR4"
        ],
        "title": [
            "Зачем нужно проходить Симулятор ML? | karpov.courses"
        ],
        "description": [
            "Симулятор ML: https://bit.ly/3E4jQos\n\nНа старте карьеры многие из нас попадали в замкнутый круг «чтобы получить работу – нужно показать опыт; чтобы получить опыт – нужно, чтобы тебя взяли на работу». Как его разорвать? Найти стажировку? Сделать свой пет-проект?.. \n\nМы решили помочь вырваться из этого парадокса и создали симулятор инженера по машинному обучению. Здесь вы научитесь решать задачи, с которыми инженеры сталкиваются ежедневно. Уже в первые месяцы тренировок вы подружитесь со всеми необходимыми для работы инструментами, начнёте понимать полный цикл построения ML-систем и узнаете, как с помощью машинного обучения приносить бизнесу прибыль, что повысит вашу ценность для компании."
        ],
        "audio_path": [
            "../data/audio/Api2RW4ogR4.mp4"
        ],
        "text": [
            "Без опыта работы человека часто не берут на работу. А без работы ему часто не получается получить опыта на работе. Классический парадокс, бесконечная петля. Если вы думаете, что она возникает везде, но не в машинном обучении, то это не так. В подробнейшем большинстве обучающих курсов вам покажут, как обучать модели, как применять алгоритм. Вообще это не дает комплексного понимания того, чем же занимается инженер по машинному обучению. По факту есть куча чего до. От банального взять таску в тасктрекере, откуда-то данные выгрузить, куда-то их загрузить, какой-то стриминг настроить, потом обучить модель, применить ее к чему-то, а потом ее надо задеплоить или ее результат визуализировать, построить мониторинг, возможно провести АБТС. В общем, это куча всего. Это целый пайплайн, в котором еще можно много-много чего накидать. ML-симулятор призван как раз эту задачу решить. То есть это инфраструктура с задачами разного уровня. Вы туда приходите, понимаете, что вы сейчас уже можете сделать, а что вы делать не можете, пытаетесь это сделать, на этом учитесь и приобретаете этот комплексный охват. По окончанию симулятора вы можете уверенно сказать, я знаю, как решать эти задачи. Это вам поможет либо при приеме на работу, либо когда на работе у вас будет новая задача, будете знать, что с ней делать. Меня зовут Валерий Бабушкин, я хед в DataScience Blockchain.com и я приглашаю вас в симулятор инженера по машинному обучению.\n"
        ],
        "control_questions": [
            "Какие задачи решает ML-симулятор и как он помогает инженерам по машинному обучению при приеме на работу и в работе?"
        ]
    },
    {
        "url": [
            "https://www.youtube.com/watch?v=kYcA_RVDNWM"
        ],
        "title": [
            "Redash display | Симулятор SQL | karpov.courses"
        ],
        "description": [
            "Урок: https://lab.karpov.courses/learning/152/module/1762/lesson/18484/53200/269826/\nСимулятор SQL: https://bit.ly/3XDroX0"
        ],
        "audio_path": [
            "../data/audio/kYcA_RVDNWM.mp4"
        ],
        "text": [
            "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. Вот это вовсе не означает, что этих секунд нет на самом деле, это просто означает, что немножко вот так вот сокращает формат Redash. И забегая чуть вперед, если бы мы хотели отобрать, соответственно, запись, где у нас время, Creation Time вот такое, то вот такая вот форма записи у нас бы не сработала. Видите, мы бы вообще не вернули, прошу прощения, здесь я, да, ну, кстати, вот, была бы ошибка, что вообще как бы мы не смогли бы здесь так сравнить, и вот видите, здесь даже Redash нам сам бы написал, что скорее всего у нас в другом формате на самом деле хранится наше время. А если бы мы использовали для отбора нужных нам наблюдений время вот в таком формате, то все бы сработало. Мы чуть позже научимся уже отбирать нужные нам записи при помощи Wear, пока это просто демонстрация, которая основана для того, нужна для того, чтобы вы понимали, как на самом деле хранятся данные. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Нужно просто понимать, что зачастую формат, который хранится в самих данных, и формат, который отображается, он может различаться. Второй пример тоже довольно показательный. Давайте, например, представим, что у нас задача посчитать среднее количество заказов на пользователя. У нас было 10, соответственно, заказов и, соответственно, 7 пользователей. Если мы посчитаем вот эту вот, прошу прощения, здесь просто select. Если мы посчитаем вот такую вот запись, то мы получим 1,43. И можно подумать, как будто у нас только два знака после запятой. Но если бы мы, на самом деле, допустим, вот скачали бы наш результат, такой CSV-файлик, и посмотрели бы, что вот там получилось, то мы бы увидели, что после запятой вы видите довольно много знаков в том числе. В этом смысле Redash просто, как только видит числа, у которых есть знаки после запятой, округляет до двух. И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой. Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Текстовый формат Redash уже никак не, соответственно, форматирует, и вот мы могли бы убедиться, что на самом деле вот в таком формате хранится у нас с вами эта запись. И в справедливости ради, если бы мы 10, деленное на 7, тоже перевели бы в текстовый формат, мы бы увидели, что там сильно больше знаков после запятой, прошу прощения, сильно больше знаков после запятой, потому что, опять же, это просто уже Redash округлил нам это число, а на самом деле там сильно больше знаков. Вот, это два таких нюанса, и при этом, как я уже сказал, что ладно бы, если это было исключительно там просто только для курса важно, но в каком-то смысле и на реальной работе вы сможете столкнуться с тем, что если вы подумаете, допустим, что здесь у вас там уже округление произведено, а для каких-то дальнейших вычислений, вот для какой-то работы там целого пайплайна аналитического все-таки довольно важно, чтобы, например, аналитик выдавал какие-то значения, округленные до двух знаков, то вы должны в своем коде явно прописывать округление уже, соответственно, при помощи функции, а не доверяя тому, что просто Redash сам округляет для более удобного восприятия. Вот такая вот важная история, надеюсь, она пригодится вам при решении наших задачек и в работе может реально пригодиться и сэкономит вам, возможно, время для поиска ошибки, когда вы думаете, что там у вас уже округлено до двух знаков, а на самом деле просто, соответственно, этот Redash так сделал. Или когда в примере ожидаемого результата написана дата в формате 2022.1409, а Redash возвращает через эти слэши, и вы думаете, как бы мне там срочно переформатировать формат даты. Ничего страшного, просто помните, что на самом деле это Redash немного так подкручивает у себя чисто визуально данные, и просто можете теперь более аккуратно решать наши задачки.\n"
        ],
        "control_questions": [
            "Как Redash отображает дату и время в своих результатных данных и как они хранятся в базе данных PostgreSQL?",
            "Как Redash отображает данные и как это может повлиять на результаты анализа данных?",
            "Какие нюансы и проблемы могут возникнуть при работе с данными в Redash, связанные с форматированием чисел и дат?"
        ]
    },
    {
        "url": [
            "https://www.youtube.com/watch?v=NcDcxOqB52k"
        ],
        "title": [
            "Об A/B тестах без A/B тестов | Никита Маршалкин | karpov.courses"
        ],
        "description": [
            "Симулятор A/B-тестов: http://bit.ly/3ZQCp7t \n\nСмотрите полное интервью по ссылке: https://youtu.be/gljfGAkgX_o\n\nУчитесь Data Science с нами: https://karpov.courses/"
        ],
        "audio_path": [
            "../data/audio/NcDcxOqB52k.mp4"
        ],
        "text": [
            "Моя любимая рубрика — это АБ-эксперименты без АБ-экспериментов. Сейчас поясню, что я имею в виду. На практике иногда происходят события, которые никак не предугадать. Вот случился ковид. И сразу все стали бросаться смотреть на графики, как ковид на что-нибудь повлиял. Вот, например, классический такой график. Как ковид повлиял, например, на показы рекламы мобильных игр в ленте. И вот мы видим, что что-то подросло. Понятное дело, что тяжело провести АБ-тест с вопросом, как ковид влияет на показы АБ-тестов. Как минимум, звучит не очень этично. Как ковид влияет на показы рекламы. И на самом деле на практике, на моей практике, это тоже очень частый вопрос. Прибегают какие-то продукты, менеджеры, другие отделы. Говорят, Толя, уже вчера выкатили. АБ-тест нужно было провести позавчера, поэтому сорян. Вот смотри, вот мы выкатили, и вот что-то поросло-падало. Что делать в таких ситуациях? Знаешь, такая классическая методология научная говорит, что ничего. Это псевдоэксперимент, все, никаких выводов сделать нельзя. На практике не очень полезный ответ. То есть ковид действительно либо повлиял, либо не повлиял. Как можно этот график интерпретировать и попробовать сделать какой-то статвывод все-таки? Если откатиться немножко, если уже выкатили, то можно закатить обратно. Взять маленькую группу пользователей. Это, кстати, интересный поинт. И провести не прямой эксперимент, когда мы на большом количестве контроль и на маленькой мы тестируем гипотезу, а провести обратный эксперимент, когда мы на всех уже раскатили, еще вчера, а на какую-то маленькую тестовую группу обратно закатили. Это, кстати, классно, потому что обычно все представляют, что АБ-тест – это что-то, когда мы наоборот тестируем, а тут мы наоборот отменяем и смотрим результат. Мы же тестируем, чтобы пользователей не обидеть, и тестируем какой-то маленькой группе. А если уже раскатили, можно провести обратный и сделать все правильно. Ну, а если все-таки глобальная ситуация? Ну, тогда рисуем два графика недели к неделю, берем линейку и смотрим, на сколько миллиметров, сантиметров вырос график. То есть здесь, в принципе, можно, получается, тоже статистически сравнивать просто, грубо говоря, эту же метрику с самой собой? Не статистически, а с линеечкой, скорее. Потому что неделя к неделе все будет краситься, и эффект сезонности всегда будет давать созначимые изменения, созначимые результаты. Тут так, на глаз, на 2%, на 3%. А какая у нас сезонность обычно, а какая сезонность сегодня. И если там вырос на 20%, то, скорее всего, что-то произошло. Понятно. Ну вот, кстати, с раскатом обратно прикольно. Я правильно понимаю, что это отчасти напоминает ухудшающий АБ-тест?\n"
        ],
        "control_questions": [
            "Как можно использовать обратный эксперимент и сравнение графиков для анализа влияния ковида на показы рекламы мобильных игр?"
        ]
    }
]