[
    {
        "question": "Что такое Симулятор ML и зачем он нужен?",
        "sourses": "Это организация поставки данных, их очистка, написание каких-то тестов на качество данных, на код, который вы описываете вокруг модели, строение модели, её валидация, абы-тесты, да даже банальная работа с таск-менеджером. Обычно на чём-то из этого и спотыкаются новички. На самом деле они спотыкаются даже на моменте построения модели машинного обучения, но если что-то выходит за пределы этого, то там точно жди проблемы. Я хочу вам помочь закрыть эти пробелы ещё на стадии обучения. Для этого мы, собственно, и создали симулятор. Подняли там инфраструктуру, заполнили его задачами. На этой инфраструктуре вы эти задачи решаете, и именно такую инфу или максимально похожую на неё вы встретите практически в любой компании. Как это будет выглядеть? Иногда это будет просто отсылкой решения в грейдер. В результате можно взять то, что подходит именно вам. Чтобы начать, вообще практически ничего не надо. Почему? Есть задачи разного уровня. Вытащить данные из какой-то базы – это простой SQL необходим. А задеплоить модель в докере – это совершенно другой уровень. Поэтому лучше всего прийти, посмотреть типовые задачи и понять, а в принципе я вообще могу её решить или нет. Но, поверьте, так как задачи есть минимального уровня, то и требования крайне минимальные. Может возникнуть резонный вопрос. Почему это вообще называется ML-симулятор, а не просто сборник задач по ML? Думаю, не открою вам какой-то тайны, если скажу, что в жизни реального инженера по машинному обучению само машинное обучение занимает между 5 и 20 процентами. Всё остальное время занимают различные этапы до ML и после ML, которые мы покрываем в этом симуляторе. Но кто сказал, что он есть у роботодателя? Поэтому охотнее берут тех, кто готов с самого первого дня уже хоть какую-то пользу приносить. Наш ML-симулятор способен дать вам этот опыт. По факту это платформа, на которой собраны актуальные задачи, которые ежедневно решает множество людей во множестве разных компаний. Все задачи разделены на несколько уровней сложности. От самого первого, самого простого. Это просто какая-то визуализация. Или существующее решение надо покрутить и улучшить. Или что-то из базы данных вытащить. До максимального, где нужно уже задеплоить какой-то сервис в контейнере. При этом есть разные типы задач. Работа с картинками, с текстом, АБТСТ, визуализация, временные ряды. Просто что-то вытащить из базы данных. Многое-многое другое. Получается, что кроме уровней есть ещё сами по себе разные типы задач.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=LhmU-oPFxj4 - Зачем нужен Симулятор ML-инженера? | Валерий Бабушкин | karpov.courses)",
        "response": "ML-симулятор - это платформа, на которой собраны актуальные задачи, связанные с машинным обучением, которые ежедневно решаются в различных компаниях. Симулятор предлагает задачи разного уровня сложности, начиная от простых задач до задач, требующих деплоя модели в контейнере. Он предоставляет возможность новичкам и профессионалам улучшить навыки работы с данными, их очистки, написания тестов на качество данных и кода, построения моделей, их валидации, тестирования, а также работы с таск-менеджером. Через решение задач на платформе ML-симулятора пользователи могут получить практический опыт и представление о типовых задачах, с которыми они могут столкнуться при работе в компании. Таким образом, ML-симулятор помогает закрыть пробелы в знаниях и навыках, связанных с различными этапами работы с данными и моделями машинного обучения.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие проблемы возникают у людей без опыта работы в машинном обучении?",
        "sourses": "Без опыта работы человека часто не берут на работу. А без работы ему часто не получается получить опыта на работе. Классический парадокс, бесконечная петля. Если вы думаете, что она возникает везде, но не в машинном обучении, то это не так. В подробнейшем большинстве обучающих курсов вам покажут, как обучать модели, как применять алгоритм. Вообще это не дает комплексного понимания того, чем же занимается инженер по машинному обучению. По факту есть куча чего до. От банального взять таску в тасктрекере, откуда-то данные выгрузить, куда-то их загрузить, какой-то стриминг настроить, потом обучить модель, применить ее к чему-то, а потом ее надо задеплоить или ее результат визуализировать, построить мониторинг, возможно провести АБТС. В общем, это куча всего. Это целый пайплайн, в котором еще можно много-много чего накидать. Вы проходите различные курсы по машин-лёрнингу, дата-сайенсу и, возможно, начинаете подозревать, что на самом деле всё гораздо сложнее. Я вас разочарую. Всё на самом деле гораздо сложнее. Когда люди после курсов начинают искать работу, они, к своему удивлению, обнаруживают, что ML ради ML, модели ради модели, никому не нужны. Что бизнесу, оказывается, нужно, чтобы были решены реальные задачи и принесены настоящие деньги. А уже чем это будет сделано, ему не так важно. И это большая проблема для начинающих специалистов. Причём неважно, где они учились. В крутом вузе? Самостоятельно? По курсам? Всё равно нужно какое-то время, чтобы понять связь между теорией и практикой. Хорошо. Допустим, у вас это время есть, и вы готовы его вкладывать. Но кто сказал, что он есть у роботодателя? Воспроизводимость статей – большая проблема. Вот в аспирантуре, когда мы занимаемся ресерчем как раз, по тем же задачам, которые я пишу в продакшн, мы еще занимаемся ресерчем, и там обучаем нейронки. И вот воспроизводимость задач очень сложная. Это, кстати, известная проблема в науке. Очень часто считается, что если что-то публиковали, то это становится таким достоянием, и как бы все там. Сослался на статью, это как бы истинно финальные инстанции. Это отдельная история, что в некоторых областях даже такой большой кризис невоспроизводимости. И, судя по всему, МЭЛИ тоже не обошло стороной. Это интересно. Ты упомянула, что ты в аспирантуре. То есть ты решила академическую часть тоже не забрасывать. Попробовать, да. Что ты делаешь в аспирантуре? Как вообще устроена аспирантура по машинному обучению?",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=u-xjI5etUlM - Дарья Яковлева о работе в Google и машинном обучении ВКонтакте | Интервью | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=LhmU-oPFxj4 - Зачем нужен Симулятор ML-инженера? | Валерий Бабушкин | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=Api2RW4ogR4 - Зачем нужно проходить Симулятор ML? | karpov.courses)",
        "response": "Проблемы, которые могут возникать у людей без опыта работы в машинном обучении, включают:\n\n1. Отсутствие возможности получить опыт работы: Без предыдущего опыта работы, многие работодатели могут отказывать в приеме на работу. Отсутствие работы также означает отсутствие возможности получить опыт в работе с реальными данными и применять алгоритмы машинного обучения.\n\n2. Отсутствие понимания комплексности работы инженера по машинному обучению: Пройденные курсы могут не предоставить полного и комплексного понимания всех аспектов работы в области машинного обучения, включая задачи сбора и загрузки данных, настройку стриминга, деплой моделей, построение мониторинга и выпуск решений в реальную среду.\n\n3. Недостаток практического опыта: Возможно, несмотря на профильное образование или прохождение обучающих курсов, у начинающих специалистов может не хватать практического опыта в решении реальных задач бизнеса и создании результатов, которые принесут финансовую выгоду.\n\n4. Ориентация на моделирование ради моделирования: Некоторые начинающие специалисты, фокусируются на алгоритмах и моделях машинного обучения, не понимая, что бизнесу важны реальные задачи и финансовый результат, а не теоретические концепции.\n\n5. Проблема воспроизводимости: В научных и академических сферах машинного обучения может возникать проблема воспроизводимости результатов и экспериментов, что значительно усложняет применение и адаптацию исследований в реальных сценариях или на практике.",
        "faithfulness": true,
        "relevancy": false
    },
    {
        "question": "Что включает в себя работа инженера по машинному обучению?",
        "sourses": "И даже больше скажу, что я после окончания курса, я понял, что совмещать параллельно работу и учебу, качественно учиться невозможно, поэтому я принял решение уволиться и пойти целиком на симулятор для того, чтобы лучше, так сказать, впитать все знания. А прошлый мой опыт, он никак не связан с IT. Я в последнее время работал главным специалистом авторского надзора. Ты знаешь, что такое авторский надзор? Если нет, могу рассказать. Нет. Значит, это когда проектный институт, то есть какая-то проектная организация выпускает свои чертежи, проекты, и они непосредственно воплощаются в жизнь, то выделяется человек или группа специалистов, которые непосредственно находятся на стройке и решают либо на месте вопросы, либо как-то пытаются их дистанционно решить, задействовав ресурсы со стороны из организации. Эти данные вводят сами клиенты. И когда, получается, они ввели эти данные, бюджет посчитан, берется он к исполнению. И после этого нужно данные сравнить с актуальными значениями, которые приходят уже из бухгалтерских систем. Мы смотрим, насколько бюджет выходит за рамки вот такой программы. Звучит чисто как задача машинного обучения. Там есть ML под капотом? ML есть, но он используется не для обсчета все-таки, а для того, чтобы упростить создание вот этих бюджетов. На основе каких-то статистических данных, которые были до этого. То есть вы опираетесь в ценообразование, вы опираетесь на то, что было раньше, из этого вы стараетесь? Да. Ну да, вот это и ML-задача. Я понял. Окей. Звучит. Классно. Интересно. Хорошо. Теперь давай делаем резкий скачок по таймлайну. Кем ты мечтал стать в детстве? Что ты о себе думал? Кем я мечтал стать в детстве? Всем привет! Моё имя Богдан, я автор симулятора инженера машинного обучения. Место, где вы можете получить опыт работы ML-инженера до того, как устроитесь ML-инженером, либо же получить дополнительный опыт, если вы уже работаете либо ML-инженером, либо на другой специальности, и хотите укоренить свои навыки. И сегодня мы проводим mock-интервью, открытое собеседование с Вадимом, одним из ML-инженеров, который участвует в симуляторе. Вадим, привет! Привет, привет! Расскажи вообще вкратце, как ты попал в симулятор и про свой опыт. Ну, мне кажется, в симулятор попадают многие после окончания курсов Karpov Courses, и я не был исключением. То есть я пошел учиться на StartML, и я понял, что не хватает каких-то практических знаний. И то, что запустили симулятор ML, это было прям супер вовремя, и я не раздумываясь пошел туда.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=e3s85Zcv0K0 - Иван Волков — о самообучении в IT и работе тимлидом | Подкаст | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=HTBLj6GRVHI - Junior ML-инженер | Собеседование | karpov.courses)",
        "response": "Работа инженера по машинному обучению включает в себя разработку и обучение моделей машинного обучения, анализ и подготовку данных, выбор и оптимизацию алгоритмов машинного обучения, создание и обработку датасетов, тестирование и оценку моделей, решение задач в области классификации, регрессии, кластеризации и других методов машинного обучения, а также работу с библиотеками и инструментами для анализа данных и машинного обучения.",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Какие задачи можно решить с помощью ML-симулятора?",
        "sourses": "Но кто сказал, что он есть у роботодателя? Поэтому охотнее берут тех, кто готов с самого первого дня уже хоть какую-то пользу приносить. Наш ML-симулятор способен дать вам этот опыт. По факту это платформа, на которой собраны актуальные задачи, которые ежедневно решает множество людей во множестве разных компаний. Все задачи разделены на несколько уровней сложности. От самого первого, самого простого. Это просто какая-то визуализация. Или существующее решение надо покрутить и улучшить. Или что-то из базы данных вытащить. До максимального, где нужно уже задеплоить какой-то сервис в контейнере. При этом есть разные типы задач. Работа с картинками, с текстом, АБТСТ, визуализация, временные ряды. Просто что-то вытащить из базы данных. Многое-многое другое. Получается, что кроме уровней есть ещё сами по себе разные типы задач. В результате можно взять то, что подходит именно вам. Чтобы начать, вообще практически ничего не надо. Почему? Есть задачи разного уровня. Вытащить данные из какой-то базы – это простой SQL необходим. А задеплоить модель в докере – это совершенно другой уровень. Поэтому лучше всего прийти, посмотреть типовые задачи и понять, а в принципе я вообще могу её решить или нет. Но, поверьте, так как задачи есть минимального уровня, то и требования крайне минимальные. Может возникнуть резонный вопрос. Почему это вообще называется ML-симулятор, а не просто сборник задач по ML? Думаю, не открою вам какой-то тайны, если скажу, что в жизни реального инженера по машинному обучению само машинное обучение занимает между 5 и 20 процентами. Всё остальное время занимают различные этапы до ML и после ML, которые мы покрываем в этом симуляторе. ML-симулятор призван как раз эту задачу решить. То есть это инфраструктура с задачами разного уровня. Вы туда приходите, понимаете, что вы сейчас уже можете сделать, а что вы делать не можете, пытаетесь это сделать, на этом учитесь и приобретаете этот комплексный охват. По окончанию симулятора вы можете уверенно сказать, я знаю, как решать эти задачи. Это вам поможет либо при приеме на работу, либо когда на работе у вас будет новая задача, будете знать, что с ней делать. Меня зовут Валерий Бабушкин, я хед в DataScience Blockchain.com и я приглашаю вас в симулятор инженера по машинному обучению.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=LhmU-oPFxj4 - Зачем нужен Симулятор ML-инженера? | Валерий Бабушкин | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=Api2RW4ogR4 - Зачем нужно проходить Симулятор ML? | karpov.courses)",
        "response": "С помощью ML-симулятора можно решить различные задачи в области машинного обучения, такие как работа с картинками, текстом, АБТСТ, визуализация, временные ряды, вытягивание данных из базы данных и многие другие. Все задачи разделены на несколько уровней сложности, начиная с простых задач вроде визуализации или улучшения существующих решений и заканчивая более сложными, такими как деплой сервиса в контейнере. Минимальные требования для выполнения задач также минимальны, поэтому ML-симулятор подходит для широкого круга пользователей, независимо от уровня опыта.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как ML-симулятор поможет при приеме на работу или при выполнении новых задач на работе?",
        "sourses": "Но кто сказал, что он есть у роботодателя? Поэтому охотнее берут тех, кто готов с самого первого дня уже хоть какую-то пользу приносить. Наш ML-симулятор способен дать вам этот опыт. По факту это платформа, на которой собраны актуальные задачи, которые ежедневно решает множество людей во множестве разных компаний. Все задачи разделены на несколько уровней сложности. От самого первого, самого простого. Это просто какая-то визуализация. Или существующее решение надо покрутить и улучшить. Или что-то из базы данных вытащить. До максимального, где нужно уже задеплоить какой-то сервис в контейнере. При этом есть разные типы задач. Работа с картинками, с текстом, АБТСТ, визуализация, временные ряды. Просто что-то вытащить из базы данных. Многое-многое другое. Получается, что кроме уровней есть ещё сами по себе разные типы задач. В некоторых случаях вы должны будете сделать дашборд и кому-то его показать. В самых тяжёлых случаях это будет production-ready контейнер, ради которого необходимо будет поднять инфраструктуру и решить задачу. Получается, что здесь всё как в настоящей работе, но только без рисков. Можно в своём темпе решать задачи любой сложности, не боясь чего-то порушить, того, что наступит дедлайн или что вас уволят за ошибку. Наша задача сделать из вас классного ML-специалиста, который может мыслить самостоятельно и нестандартно. Поэтому те задачи, которые мы дали, можно решить множеством способов, чтобы выйти за рамки коробочных решений. После симулятора вы точно будете готовы к серьёзной работе. Будете гораздо более уверены в себе и в своих силах. И вам точно будет о чём поговорить на собеседовании. До встречи на ML-симуляторе! В результате можно взять то, что подходит именно вам. Чтобы начать, вообще практически ничего не надо. Почему? Есть задачи разного уровня. Вытащить данные из какой-то базы – это простой SQL необходим. А задеплоить модель в докере – это совершенно другой уровень. Поэтому лучше всего прийти, посмотреть типовые задачи и понять, а в принципе я вообще могу её решить или нет. Но, поверьте, так как задачи есть минимального уровня, то и требования крайне минимальные. Может возникнуть резонный вопрос. Почему это вообще называется ML-симулятор, а не просто сборник задач по ML? Думаю, не открою вам какой-то тайны, если скажу, что в жизни реального инженера по машинному обучению само машинное обучение занимает между 5 и 20 процентами. Всё остальное время занимают различные этапы до ML и после ML, которые мы покрываем в этом симуляторе.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=LhmU-oPFxj4 - Зачем нужен Симулятор ML-инженера? | Валерий Бабушкин | karpov.courses)",
        "response": "ML-симулятор поможет при приеме на работу или выполнении новых задач на работе, предоставляя практический опыт и возможность решать задачи различной сложности. Он позволяет овладеть навыками работы с различными типами данных (картинками, текстом, временными рядами и т.д.) и задачами, которые ежедневно решаются в различных компаниях. Симулятор включает разные уровни сложности задач, начиная с простых действий, таких как извлечение данных из базы данных, и заканчивая более сложными задачами, например, развертывание сервиса в контейнере. Это позволяет участвовать в реальных ситуациях, анализировать и решать проблемы, не боясь ошибиться или что-то поломать. В результате, ML-специалист, прошедший симулятор, будет готов к серьезной работе, уверен в своих силах и имеет опыт работы с различными типами задач. Кроме того, успешное прохождение ML-симулятора будет являться дополнительным аргументом при собеседовании на работу в области машинного обучения.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие навыки и знания можно получить после прохождения симулятора инженера по машинному обучению?",
        "sourses": "И даже больше скажу, что я после окончания курса, я понял, что совмещать параллельно работу и учебу, качественно учиться невозможно, поэтому я принял решение уволиться и пойти целиком на симулятор для того, чтобы лучше, так сказать, впитать все знания. А прошлый мой опыт, он никак не связан с IT. Я в последнее время работал главным специалистом авторского надзора. Ты знаешь, что такое авторский надзор? Если нет, могу рассказать. Нет. Значит, это когда проектный институт, то есть какая-то проектная организация выпускает свои чертежи, проекты, и они непосредственно воплощаются в жизнь, то выделяется человек или группа специалистов, которые непосредственно находятся на стройке и решают либо на месте вопросы, либо как-то пытаются их дистанционно решить, задействовав ресурсы со стороны из организации. Всем привет! Моё имя Богдан, я автор симулятора инженера машинного обучения. Место, где вы можете получить опыт работы ML-инженера до того, как устроитесь ML-инженером, либо же получить дополнительный опыт, если вы уже работаете либо ML-инженером, либо на другой специальности, и хотите укоренить свои навыки. И сегодня мы проводим mock-интервью, открытое собеседование с Вадимом, одним из ML-инженеров, который участвует в симуляторе. Вадим, привет! Привет, привет! Расскажи вообще вкратце, как ты попал в симулятор и про свой опыт. Ну, мне кажется, в симулятор попадают многие после окончания курсов Karpov Courses, и я не был исключением. То есть я пошел учиться на StartML, и я понял, что не хватает каких-то практических знаний. И то, что запустили симулятор ML, это было прям супер вовремя, и я не раздумываясь пошел туда. Вы проходите различные курсы по машин-лёрнингу, дата-сайенсу и, возможно, начинаете подозревать, что на самом деле всё гораздо сложнее. Я вас разочарую. Всё на самом деле гораздо сложнее. Когда люди после курсов начинают искать работу, они, к своему удивлению, обнаруживают, что ML ради ML, модели ради модели, никому не нужны. Что бизнесу, оказывается, нужно, чтобы были решены реальные задачи и принесены настоящие деньги. А уже чем это будет сделано, ему не так важно. И это большая проблема для начинающих специалистов. Причём неважно, где они учились. В крутом вузе? Самостоятельно? По курсам? Всё равно нужно какое-то время, чтобы понять связь между теорией и практикой. Хорошо. Допустим, у вас это время есть, и вы готовы его вкладывать. Но кто сказал, что он есть у роботодателя?",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=LhmU-oPFxj4 - Зачем нужен Симулятор ML-инженера? | Валерий Бабушкин | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=HTBLj6GRVHI - Junior ML-инженер | Собеседование | karpov.courses)",
        "response": "После прохождения симулятора инженера по машинному обучению можно получить практические навыки и знания в области машинного обучения, data science и других связанных технологий. Это может включать в себя разработку и обучение моделей машинного обучения, работу с большими объемами данных, использование алгоритмов и инструментов для обработки и анализа данных, понимание структуры и принципов работы ML-систем, а также решение реальных задач бизнеса с помощью методов машинного обучения. Симулятор также предоставляет возможность практической работы и опыта в области ML-инженерии.",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Что такое Redash и как он отображает данные?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. В прошлом занятии мы выяснили, что у нас за продукт, какие данные мы собираем и как мы организовали их хранение. Теперь пришло время попробовать на эти данные уже посмотреть. Давайте сейчас вместе откроем Redash и сначала разберемся с тем, что это такое. Redash это как раз таки инструмент, который позволяет нам взаимодействовать с нашими базами данных, писать различные запросы к ним, визуализировать какие-то результаты и удобно работать с данными, которые у нас хранятся. То есть Redash это один из таких наиболее популярных инструментов, которые используют аналитики при работе с базами данных. Хотя это не единственный инструмент, их довольно много разных, но вот Redash довольно популярный. Итак, когда мы попали на стартовое окно, нажимаем Create, New Query. Обратите внимание, что помимо запросов есть еще и дашборды, алерты, об этом поговорим чуть позже. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=J_Wn3sZ5wcc - Первые запросы | Симулятор SQL | karpov.courses)",
        "response": "Redash - это инструмент, который позволяет взаимодействовать с базами данных, писать запросы и визуализировать результаты. Он отображает данные, хранящиеся в базе данных, в своем собственном формате, который может отличаться от исходного формата данных. Например, при отображении времени Redash может не отображать секунды и не полностью отображать год. Это нормально, так как разные инструменты могут использовать разные форматы при визуализации данных.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Где хранятся данные в Redash?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. В прошлом занятии мы выяснили, что у нас за продукт, какие данные мы собираем и как мы организовали их хранение. Теперь пришло время попробовать на эти данные уже посмотреть. Давайте сейчас вместе откроем Redash и сначала разберемся с тем, что это такое. Redash это как раз таки инструмент, который позволяет нам взаимодействовать с нашими базами данных, писать различные запросы к ним, визуализировать какие-то результаты и удобно работать с данными, которые у нас хранятся. То есть Redash это один из таких наиболее популярных инструментов, которые используют аналитики при работе с базами данных. Хотя это не единственный инструмент, их довольно много разных, но вот Redash довольно популярный. Итак, когда мы попали на стартовое окно, нажимаем Create, New Query. Обратите внимание, что помимо запросов есть еще и дашборды, алерты, об этом поговорим чуть позже. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=J_Wn3sZ5wcc - Первые запросы | Симулятор SQL | karpov.courses)",
        "response": "Данные в Redash хранятся в специальной базе данных в PostgreSQL.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как Redash отображает время в таблице orders?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. Вот это вовсе не означает, что этих секунд нет на самом деле, это просто означает, что немножко вот так вот сокращает формат Redash. И забегая чуть вперед, если бы мы хотели отобрать, соответственно, запись, где у нас время, Creation Time вот такое, то вот такая вот форма записи у нас бы не сработала. Видите, мы бы вообще не вернули, прошу прощения, здесь я, да, ну, кстати, вот, была бы ошибка, что вообще как бы мы не смогли бы здесь так сравнить, и вот видите, здесь даже Redash нам сам бы написал, что скорее всего у нас в другом формате на самом деле хранится наше время. А если бы мы использовали для отбора нужных нам наблюдений время вот в таком формате, то все бы сработало. Мы чуть позже научимся уже отбирать нужные нам записи при помощи Wear, пока это просто демонстрация, которая основана для того, нужна для того, чтобы вы понимали, как на самом деле хранятся данные.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Redash отображает время в таблице orders в формате, где число, месяц и год разделены слэшем, а год записан только двумя последними цифрами.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какой формат отображения даты по умолчанию в Redash?",
        "sourses": "Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Вот такая вот важная история, надеюсь, она пригодится вам при решении наших задачек и в работе может реально пригодиться и сэкономит вам, возможно, время для поиска ошибки, когда вы думаете, что там у вас уже округлено до двух знаков, а на самом деле просто, соответственно, этот Redash так сделал. Или когда в примере ожидаемого результата написана дата в формате 2022.1409, а Redash возвращает через эти слэши, и вы думаете, как бы мне там срочно переформатировать формат даты. Ничего страшного, просто помните, что на самом деле это Redash немного так подкручивает у себя чисто визуально данные, и просто можете теперь более аккуратно решать наши задачки.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Формат отображения даты по умолчанию в Redash имеет вид день/месяц/год.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "В каком формате хранится дата в базе данных PostgreSQL?",
        "sourses": "И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. То есть, допустим, пользователь один сделал такое-то событие в такое-то время, и вот эти данные как бы пошли по строчкам писаться. И как организовать хранение данных в нашей компании — это вот одна из таких очень интересных задач, которые часто решают дата-инженеры, архитекторы, но и аналитики могут в этом помогать. Мы с вами сделали такую первую версию, просто написали вот условно ручкой на бумажке всю информацию про одно событие, про один заказ. Но, как вы понимаете, как я сказал, хранить много данных в таком формате не очень удобно. И поэтому на практике используется различный набор баз данных, которые хранят, каждая база данных, какую-то свою часть информации. Эти базы данных между собой как-то связаны, и в целом они как бы покрывают хранение всех данных нашего продукта. Вот здесь на слайде вы видите то, как устроено хранение наших данных в нашем продукте. Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=cK7K0g1rXKw - Знакомство с продуктом | Симулятор SQL | karpov.courses)",
        "response": "Дата в базе данных PostgreSQL хранится в формате 'год-месяц-день час:минута:секунда'.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как Redash сокращает формат времени?",
        "sourses": "Вот это вовсе не означает, что этих секунд нет на самом деле, это просто означает, что немножко вот так вот сокращает формат Redash. И забегая чуть вперед, если бы мы хотели отобрать, соответственно, запись, где у нас время, Creation Time вот такое, то вот такая вот форма записи у нас бы не сработала. Видите, мы бы вообще не вернули, прошу прощения, здесь я, да, ну, кстати, вот, была бы ошибка, что вообще как бы мы не смогли бы здесь так сравнить, и вот видите, здесь даже Redash нам сам бы написал, что скорее всего у нас в другом формате на самом деле хранится наше время. А если бы мы использовали для отбора нужных нам наблюдений время вот в таком формате, то все бы сработало. Мы чуть позже научимся уже отбирать нужные нам записи при помощи Wear, пока это просто демонстрация, которая основана для того, нужна для того, чтобы вы понимали, как на самом деле хранятся данные. Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Redash сокращает формат времени, удаляя секунды из отображения.",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Как можно отобрать записи с определенным Creation Time в Redash?",
        "sourses": "Вот это вовсе не означает, что этих секунд нет на самом деле, это просто означает, что немножко вот так вот сокращает формат Redash. И забегая чуть вперед, если бы мы хотели отобрать, соответственно, запись, где у нас время, Creation Time вот такое, то вот такая вот форма записи у нас бы не сработала. Видите, мы бы вообще не вернули, прошу прощения, здесь я, да, ну, кстати, вот, была бы ошибка, что вообще как бы мы не смогли бы здесь так сравнить, и вот видите, здесь даже Redash нам сам бы написал, что скорее всего у нас в другом формате на самом деле хранится наше время. А если бы мы использовали для отбора нужных нам наблюдений время вот в таком формате, то все бы сработало. Мы чуть позже научимся уже отбирать нужные нам записи при помощи Wear, пока это просто демонстрация, которая основана для того, нужна для того, чтобы вы понимали, как на самом деле хранятся данные. Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Для отбора записей с определенным Creation Time в Redash можно использовать следующий формат записи: \"ГГГГ-ММ-ДД ЧЧ:ММ:СС\". Например, чтобы отобрать записи созданные 8 августа 2022 года, можно использовать следующее условие в запросе: \"WHERE Creation Time = '2022-08-08 00:00:00'\". Однако следует учесть, что Redash может отображать данные в другом формате, например, без секунд и сокращенным отображением года.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие ошибки могут возникнуть при использовании неправильного формата времени в отборе записей в Redash?",
        "sourses": "Вот это вовсе не означает, что этих секунд нет на самом деле, это просто означает, что немножко вот так вот сокращает формат Redash. И забегая чуть вперед, если бы мы хотели отобрать, соответственно, запись, где у нас время, Creation Time вот такое, то вот такая вот форма записи у нас бы не сработала. Видите, мы бы вообще не вернули, прошу прощения, здесь я, да, ну, кстати, вот, была бы ошибка, что вообще как бы мы не смогли бы здесь так сравнить, и вот видите, здесь даже Redash нам сам бы написал, что скорее всего у нас в другом формате на самом деле хранится наше время. А если бы мы использовали для отбора нужных нам наблюдений время вот в таком формате, то все бы сработало. Мы чуть позже научимся уже отбирать нужные нам записи при помощи Wear, пока это просто демонстрация, которая основана для того, нужна для того, чтобы вы понимали, как на самом деле хранятся данные. И не все CRM снабжены системами тестирования на то, насколько данные в правильное поле введены разумным образом. Поэтому да, пункт номер один – это человеческие ошибки. Так действительно могут появляться клиенты с возрастом в 200 лет или миллиардными доходами за месяц в стандартных банках. Хорошо. Следующий пункт – это погрешности измерений. Да, действительно это так. Например, если вы собираетесь прогнозировать временной ряд температуры, наверняка, если вы измеряете температуру каким-то прибором, скорее всего, у него есть какие-то погрешности. Причем часть этих погрешностей может быть связана просто с тем, что прибор имеет систематически какие-то в разные стороны случайные погрешности. Так и с тем, что на прибор может действовать каким-нибудь образом внешняя среда. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=TOK7Kq7x0yc - Методы обнаружения выбросов | Вебинар Яна Пиле | karpov.courses)",
        "response": "При использовании неправильного формата времени в отборе записей в Redash могут возникнуть следующие ошибки:\n- Несоответствие и неправильное сравнение временных значений, что может привести к некорректным результатам отбора.\n- Неотображение полного года или определенных элементов времени в результирующих данных.\n- Ошибки при написании запросов или неправильное форматирование результатов, особенно при работе в других системах для написания запросов, отличных от Redash.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие настройки есть в Redash для отображения даты?",
        "sourses": "Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "В Redash есть настройка для отображения даты, которая по умолчанию использует формат день/месяц/год, где год записан только двумя последними цифрами. Однако фактически данные хранятся в более стандартном формате, где указывается год, месяц, день, а также время в формате часы:минуты:секунды. Redash не отображает секунды и может не отобразить полный год в выводе данных.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие другие форматы отображения даты доступны в Excel?",
        "sourses": "Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Есть какой-то SQL, и есть третий путь, Excel. Я такой, ну, Excel, мне прислали CSV, по умолчанию, CSV открывается в Excel у меня на компьютере, я такой, открыл их в Excel, и такой, ну, понимаю, что мне нужно склеить таблицы. Помню, что это Join. Ну, я открыл Google, написал Join Excel. У меня там типа VPR по-русски, VLOOKUP по-английски. Я такой, ну, окей, в Excel есть Join, сжойнил таблицы в Excel. Такой, ну, а что, вроде сжойнилось. Не очень тогда разобрался, как работает VPR, и там вместо короткой формулы у меня вот такая получилась с какими-то вложенными ифами, но там, но как мог. Как мог, сделал, у меня всё сжойнилось в итоге, всё типа окей, ну, и я сохранил в отдельный документ, прямо в Excel нарисовал графики, прямо там в PowerPoint нарисовал на них какие-то комментарии, ну, типа вот тут вот это может быть, здесь вот это. Это приняли, ну, принимающую сторону, в общем-то, честно говоря, не особо интересовало, где я это сделал.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=25QL56CxchQ - Беслан Курашов о работе в Яндексе и карьере аналитика | Интервью | karpov.courses)",
        "response": "В Excel доступно много различных форматов отображения даты. Некоторые из них включают день, месяц и год, некоторые только день и месяц, а некоторые только год. Например, форматы отображения даты в Excel могут быть следующими: \"день/месяц/год\", \"месяц/день/год\", \"год/месяц/день\", \"день/месяц\", \"месяц/день\", \"год\".",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Как Redash отображает данные по датам?",
        "sourses": "Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Redash отображает данные по датам в формате дня/месяц/год, где год записывается только двумя последними цифрами.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие инструменты могут использовать свои форматы для визуализации данных?",
        "sourses": "Здесь просто count. Вот, обратите внимание, получится вот такая вот структура данных. И, опять же, в завершение могу показать еще вот такой вот интересный пример. Если мы построим плот просто поверх как бы пандасского датафрейма, у нас сразу же возникнет как бы некоторая визуализация. Ну, сейчас, понятное дело, что это не очень удачная визуализация, потому что пандас как бы по умолчанию сам пытается поместить на ось x индексы, на ось y какие-то значения. Видите, выглядит не очень хорошо. Поэтому можно рисовать как бы сразу в пандасе, можно там покопаться и найти как строить барплот прямо из пандаса. Но, если честно, мне это никогда особо не нравилось. Я всегда любил убирать индексы и строить обычный датафрейм, а визуализировать его уже в Сиборне. Например, вот в Сиборне есть у нас барплот. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Поэтому в зависимости от задачи, которую мы решаем, как бы надо понимать все аспекты наших данных, которые у нас есть. Ну что ж, сегодня мы проделали такую очень большую работу. Мы предобрабатывали данные, анализировали, рассчитывали метрики, решали продуктовые опросы. И в конце даже немного занялись визуализацией. Визуализация — это большая сложная тема. Мы к ней будем возвращаться, опять же, на протяжении всего курса. И сегодня тоже обратите внимание, пока мы с вами решали чисто аналитические задачи, мы периодически делали отступления и закрывали некоторые пробелы чисто теоретические. Мы выяснили, что такое пандовская серия. Мы выяснили, как работать с лямбда-функциями. Мы узнали, что пандовская DataFrame — это, по сути, некоторый более продвинутый словарь.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=v3T8p_75vd4 - Визуализация как метод исследования данных | Аналитик данных | karpov.courses)",
        "response": "Инструменты визуализации данных, такие как Redash и Seaborn, могут использовать свои форматы для визуализации данных.",
        "faithfulness": false,
        "relevancy": false
    },
    {
        "question": "В чем различие между форматом данных и форматом, который отображается?",
        "sourses": "И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Текстовый формат Redash уже никак не, соответственно, форматирует, и вот мы могли бы убедиться, что на самом деле вот в таком формате хранится у нас с вами эта запись. И в справедливости ради, если бы мы 10, деленное на 7, тоже перевели бы в текстовый формат, мы бы увидели, что там сильно больше знаков после запятой, прошу прощения, сильно больше знаков после запятой, потому что, опять же, это просто уже Redash округлил нам это число, а на самом деле там сильно больше знаков. И если мы написали большой запрос и нажали кнопочку «Форматировать», то мы превратим наш скрипт, наш запрос в более такой читаемый, интересный вид. И вы видите, что он теперь разбит на такие ключевые смысловые блоки, где select, где from, где условия, где какие-то объединения, где вложены какие-то дополнительные подзапросы. Мы это все с вами изучим уже совсем скоро. Сейчас я просто показал на примере большого запроса, что форматирование очень полезно позволяет сразу, не выходя из редакции, получить более красивый вид. Но на маленьких запросах это, в принципе, будет более читаемо.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=0f5YzgnobNA - Redash | Симулятор SQL | karpov.courses)",
        "response": "В данном контексте, формат данных относится к способу хранения информации в базе данных, который может отличаться от того, как эти данные отображаются в конкретном инструменте или программе, таком как Redash. Например, формат хранения может включать указание полного года или секунд, в то время как отображение данных в Redash может представлять информацию в усеченном или отформатированном виде для лучшей читаемости или визуализации.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Почему Redash округляет числа до двух знаков после запятой?",
        "sourses": "И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой. Нужно просто понимать, что зачастую формат, который хранится в самих данных, и формат, который отображается, он может различаться. Второй пример тоже довольно показательный. Давайте, например, представим, что у нас задача посчитать среднее количество заказов на пользователя. У нас было 10, соответственно, заказов и, соответственно, 7 пользователей. Если мы посчитаем вот эту вот, прошу прощения, здесь просто select. Если мы посчитаем вот такую вот запись, то мы получим 1,43. И можно подумать, как будто у нас только два знака после запятой. Но если бы мы, на самом деле, допустим, вот скачали бы наш результат, такой CSV-файлик, и посмотрели бы, что вот там получилось, то мы бы увидели, что после запятой вы видите довольно много знаков в том числе. В этом смысле Redash просто, как только видит числа, у которых есть знаки после запятой, округляет до двух. Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Redash округляет числа до двух знаков после запятой, чтобы обеспечить единообразное отображение данных и упростить их визуализацию на фронтенде. Это некий стандартный формат для отображения чисел, который может быть легко воспринят и понят пользователем. Однако, в самом деле числа могут иметь больше знаков после запятой, и для точной проверки и анализа данных может потребоваться дополнительное округление.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как можно явно округлить число до двух знаков после запятой в Redash?",
        "sourses": "И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой. Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Нужно просто понимать, что зачастую формат, который хранится в самих данных, и формат, который отображается, он может различаться. Второй пример тоже довольно показательный. Давайте, например, представим, что у нас задача посчитать среднее количество заказов на пользователя. У нас было 10, соответственно, заказов и, соответственно, 7 пользователей. Если мы посчитаем вот эту вот, прошу прощения, здесь просто select. Если мы посчитаем вот такую вот запись, то мы получим 1,43. И можно подумать, как будто у нас только два знака после запятой. Но если бы мы, на самом деле, допустим, вот скачали бы наш результат, такой CSV-файлик, и посмотрели бы, что вот там получилось, то мы бы увидели, что после запятой вы видите довольно много знаков в том числе. В этом смысле Redash просто, как только видит числа, у которых есть знаки после запятой, округляет до двух.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Чтобы явно округлить число до двух знаков после запятой в Redash, можно использовать функцию ROUND().",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Почему важно помнить о различии между округленным результатом в Redash и округленным результатом, отправляемым на проверку?",
        "sourses": "Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Вот, это два таких нюанса, и при этом, как я уже сказал, что ладно бы, если это было исключительно там просто только для курса важно, но в каком-то смысле и на реальной работе вы сможете столкнуться с тем, что если вы подумаете, допустим, что здесь у вас там уже округление произведено, а для каких-то дальнейших вычислений, вот для какой-то работы там целого пайплайна аналитического все-таки довольно важно, чтобы, например, аналитик выдавал какие-то значения, округленные до двух знаков, то вы должны в своем коде явно прописывать округление уже, соответственно, при помощи функции, а не доверяя тому, что просто Redash сам округляет для более удобного восприятия. И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Важно помнить о различии между округленным результатом в Redash и округленным результатом, отправляемым на проверку, потому что в задачах часто требуется округлить метрику до двух знаков после запятой. Если результат в Redash кажется уже округленным, то необходимо выполнить округление еще раз, чтобы точно соответствовать требованиям задачи. Несоблюдение этого правила может привести к неправильным ответам при проверке.",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Какие нюансы нужно учитывать при округлении метрик до двух знаков в задачах?",
        "sourses": "И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой. Допустим, мы приходим к менеджеру, говорим, вот у нас площадь под пиар-кривой 1.9, такое четкое значение. Он спрашивает, а как мы можем быть уверены, что завтра не будет 1.7, а послезавтра 2.2? Как можно оценить позвонок, в котором болтается эта метрика? Во-первых, я могу, конечно, ошибаться, но, по-моему, больше единицы не может быть. Не попался? Хорошо. Второе, мы можем построить доверительный интервал для течения рок-рок-пиара. Но у нас, допустим, есть выборка, на которой мы обучались, и мы можем с помощью bootstrap проитерироваться несколько тысяч раз и за счет этого построить доверительный интервал метрики рок-пиара. Расскажи, как работает bootstrap, как мы строим интервал. У нас, допустим, есть выборка. Она пришла к нам из генеральной совокупности, про которую мы ничего не знаем, и у нас есть только вот эта выборка. Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=HTBLj6GRVHI - Junior ML-инженер | Собеседование | karpov.courses)",
        "response": "Нюансы, которые нужно учитывать при округлении метрик до двух знаков в задачах, включают:\n\n1. Необходимость явного округления до двух знаков после запятой, даже если визуально в отчете уже присутствует округление.\n2. Необходимость проверки значений метрик на предмет достоверности и адекватности округления.\n3. Использование bootstrap-подхода для создания доверительного интервала метрик, основанных на выборочных данных.\n4. Учет того, что Redash может хранить данные немного иначе, чем это выглядит, и возможность проверить фактический формат данных.\n5. Знание о том, что округление метрик до двух знаков является частым требованием в задачах.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Что такое Redash и как он хранит данные?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. В прошлом занятии мы выяснили, что у нас за продукт, какие данные мы собираем и как мы организовали их хранение. Теперь пришло время попробовать на эти данные уже посмотреть. Давайте сейчас вместе откроем Redash и сначала разберемся с тем, что это такое. Redash это как раз таки инструмент, который позволяет нам взаимодействовать с нашими базами данных, писать различные запросы к ним, визуализировать какие-то результаты и удобно работать с данными, которые у нас хранятся. То есть Redash это один из таких наиболее популярных инструментов, которые используют аналитики при работе с базами данных. Хотя это не единственный инструмент, их довольно много разных, но вот Redash довольно популярный. Итак, когда мы попали на стартовое окно, нажимаем Create, New Query. Обратите внимание, что помимо запросов есть еще и дашборды, алерты, об этом поговорим чуть позже. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=J_Wn3sZ5wcc - Первые запросы | Симулятор SQL | karpov.courses)",
        "response": "Redash - это инструмент, который позволяет взаимодействовать с базами данных, писать запросы к ним, визуализировать результаты и удобно работать с хранящимися данными. Он позволяет писать и выполнять запросы к базе данных и отображать результаты. Данные хранятся в специальной базе данных PostgreSQL, а Redash использует свой формат для визуализации данных, который может немного отличаться от реального представления данных в базе.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как можно посмотреть на данные в Redash в их истинном формате?",
        "sourses": "И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Чтобы посмотреть на данные в их истинном формате в Redash, можно перевести формат колонки с данными в текстовый формат и просмотреть их в этом формате.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как Redash форматирует текстовый формат данных?",
        "sourses": "Текстовый формат Redash уже никак не, соответственно, форматирует, и вот мы могли бы убедиться, что на самом деле вот в таком формате хранится у нас с вами эта запись. И в справедливости ради, если бы мы 10, деленное на 7, тоже перевели бы в текстовый формат, мы бы увидели, что там сильно больше знаков после запятой, прошу прощения, сильно больше знаков после запятой, потому что, опять же, это просто уже Redash округлил нам это число, а на самом деле там сильно больше знаков. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. И если мы написали большой запрос и нажали кнопочку «Форматировать», то мы превратим наш скрипт, наш запрос в более такой читаемый, интересный вид. И вы видите, что он теперь разбит на такие ключевые смысловые блоки, где select, где from, где условия, где какие-то объединения, где вложены какие-то дополнительные подзапросы. Мы это все с вами изучим уже совсем скоро. Сейчас я просто показал на примере большого запроса, что форматирование очень полезно позволяет сразу, не выходя из редакции, получить более красивый вид. Но на маленьких запросах это, в принципе, будет более читаемо.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=0f5YzgnobNA - Redash | Симулятор SQL | karpov.courses)",
        "response": "Redash форматирует текстовый формат данных путем округления чисел и установки определенного вида отображения даты и времени, которое может не включать секунды или полный год.",
        "faithfulness": false,
        "relevancy": false
    },
    {
        "question": "Какие нюансы связаны с округлением чисел в Redash?",
        "sourses": "Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Вот, это два таких нюанса, и при этом, как я уже сказал, что ладно бы, если это было исключительно там просто только для курса важно, но в каком-то смысле и на реальной работе вы сможете столкнуться с тем, что если вы подумаете, допустим, что здесь у вас там уже округление произведено, а для каких-то дальнейших вычислений, вот для какой-то работы там целого пайплайна аналитического все-таки довольно важно, чтобы, например, аналитик выдавал какие-то значения, округленные до двух знаков, то вы должны в своем коде явно прописывать округление уже, соответственно, при помощи функции, а не доверяя тому, что просто Redash сам округляет для более удобного восприятия. Нужно просто понимать, что зачастую формат, который хранится в самих данных, и формат, который отображается, он может различаться. Второй пример тоже довольно показательный. Давайте, например, представим, что у нас задача посчитать среднее количество заказов на пользователя. У нас было 10, соответственно, заказов и, соответственно, 7 пользователей. Если мы посчитаем вот эту вот, прошу прощения, здесь просто select. Если мы посчитаем вот такую вот запись, то мы получим 1,43. И можно подумать, как будто у нас только два знака после запятой. Но если бы мы, на самом деле, допустим, вот скачали бы наш результат, такой CSV-файлик, и посмотрели бы, что вот там получилось, то мы бы увидели, что после запятой вы видите довольно много знаков в том числе. В этом смысле Redash просто, как только видит числа, у которых есть знаки после запятой, округляет до двух.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Нюансы, связанные с округлением чисел в Redash, включают следующие аспекты:\n1. Необходимо помнить, что в задачах часто требуется округлить метрику до двух знаков. Если в Redash уже округлено, все равно необходимо сделать округление еще раз с помощью функции round.\n2. Redash может хранить данные немного иначе, чем они выглядят. Важно понимать, что формат, который отображается, может различаться от формата, в котором данные хранятся.\n3. Если для дальнейших вычислений требуется представление значений, округленных до двух знаков, необходимо явно прописывать округление в своем коде, а не полагаться на автоматическое округление Redash.\n4. При скачивании результатов в формате CSV и просмотре их содержимого, можно увидеть, что число может иметь больше чем два знака после запятой, несмотря на то, что Redash округлил его до двух знаков при отображении.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Почему важно явно указывать округление в коде при работе с аналитическим пайплайном?",
        "sourses": "Вот, это два таких нюанса, и при этом, как я уже сказал, что ладно бы, если это было исключительно там просто только для курса важно, но в каком-то смысле и на реальной работе вы сможете столкнуться с тем, что если вы подумаете, допустим, что здесь у вас там уже округление произведено, а для каких-то дальнейших вычислений, вот для какой-то работы там целого пайплайна аналитического все-таки довольно важно, чтобы, например, аналитик выдавал какие-то значения, округленные до двух знаков, то вы должны в своем коде явно прописывать округление уже, соответственно, при помощи функции, а не доверяя тому, что просто Redash сам округляет для более удобного восприятия. И даже если он выгрузил пользователей, он маркетологам и рекламщикам и менеджерам отдаст не просто выгрузку, а выгрузку и некоторое аналитическое заключение. Соответственно, сразу будем привыкать работать именно в таком формате, сразу стараться понимать, какую более глобальную задачу мы решаем, как это ни пафосно звучало. Понятное дело, что в прошлом уроке мы решали такую очень локальную задачку, буквально набивали руку. Соответственно, как посчитать сумму по заказам, сумму в разбивке по городам и так далее. Я надеюсь, что это будет первый и последний раз, когда мы делаем такую задачу абсолютно бездумно. То есть, чтобы чисто набить синтаксис. И с каждым следующим разом будем стараться уже смотреть на эту задачу более высокого уровня. Это не совсем корректно, разумеется. У нас как бы все числа на самом деле могут иметь там максимум два разряда, когда мы говорим про копейку. 53 копейки, 55, но никак не 535 тысячных. Это просто возникает в результате округления-присложения, и как бы под этими последними знаками после запятой можно пренебречь. То есть у нас будет 921 тысяча, 103 рубля, 59 копеек. Вот, все, запомнили эту переменную. И теперь начинаем уже анализировать данные. Опять же, здесь нам потребуется вот ровно тот же самый подход, про который я говорил ранее. Нам нужно сначала сформулировать задачу на русском языке, потом перевести ее на язык Пайтона. Как звучит наша задача на русском языке?",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=J-w7qAm6aTA - Что такое группировка, агрегация, сортировка данных? | Аналитик данных | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=fXCfO3hKv4w - Какая роль у аналитика в команде? | Аналитик данных | karpov.courses)",
        "response": "Важно явно указывать округление в коде при работе с аналитическим пайплайном, потому что точность и правильность вычислений имеют большое значение в аналитике. Если аналитик должен предоставить округленные значения до двух знаков после запятой, то эту операцию округления необходимо явно указать в коде, чтобы быть уверенным в правильности результатов. Просто полагаться на автоматическое округление, например, в инструменте Redash, может привести к неточностям и неправильным результатам.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какая важная информация может быть упущена, если доверять автоматическому округлению в Redash?",
        "sourses": "Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Вот, это два таких нюанса, и при этом, как я уже сказал, что ладно бы, если это было исключительно там просто только для курса важно, но в каком-то смысле и на реальной работе вы сможете столкнуться с тем, что если вы подумаете, допустим, что здесь у вас там уже округление произведено, а для каких-то дальнейших вычислений, вот для какой-то работы там целого пайплайна аналитического все-таки довольно важно, чтобы, например, аналитик выдавал какие-то значения, округленные до двух знаков, то вы должны в своем коде явно прописывать округление уже, соответственно, при помощи функции, а не доверяя тому, что просто Redash сам округляет для более удобного восприятия. И если бы в задаче вас просили бы посчитайте, например, вот orders per user, и округлите до двух знаков после запятой, вы бы сделали какой-то такой запросик и посмотрели бы, о, у меня уже до двух знаков округлено, отлично. И отправили бы на проверку, то, возможно, вы могли бы получить ошибку. Надо более явно округлить до двух знаков после запятой, и теперь это уже будет верный ответ. При этом обратите внимание, что с точки зрения Redash вот эти две записи, они никак не отличаются. Что 10 деленное на 7, что round 10 деленное на 7. Но это только потому, что Redash просто сам у себя вот на этом фронтенде своем уже, соответственно, округляет немножко до двух знаков только после запятой.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Если доверять автоматическому округлению в Redash, может быть упущена точность числовых значений после округления. Это может привести к неправильным вычислениям и неверным результатам при проведении аналитических исследований или выполнении задач, которые требуют округления до определенного числа знаков после запятой.",
        "faithfulness": false,
        "relevancy": true
    },
    {
        "question": "Какие проблемы могут возникнуть при работе с датами в Redash?",
        "sourses": "Вот такая вот важная история, надеюсь, она пригодится вам при решении наших задачек и в работе может реально пригодиться и сэкономит вам, возможно, время для поиска ошибки, когда вы думаете, что там у вас уже округлено до двух знаков, а на самом деле просто, соответственно, этот Redash так сделал. Или когда в примере ожидаемого результата написана дата в формате 2022.1409, а Redash возвращает через эти слэши, и вы думаете, как бы мне там срочно переформатировать формат даты. Ничего страшного, просто помните, что на самом деле это Redash немного так подкручивает у себя чисто визуально данные, и просто можете теперь более аккуратно решать наши задачки. Соответственно, число, месяц и год разделены вот таким вот слэшем, а год записан только двумя последними цифрами. И вот это уже на самом деле то, как Redash отображает дату. Где-то в Redash есть настройка, что если он видит дату, то он сразу же переводит ее в такой формат. Наверное, вы видели, что, например, в том же самом Excel дату можно отображать довольно большим количеством в разных форматах. Сначала день, потом год, сначала год, потом день и так далее. То же самое в Redash. По умолчанию стоит вот такой формат отображения даты. При этом на самом деле дата хранится в более таком стандартном для анализа данных формате, где полностью сначала указывается год, месяц, день, и потом через пробелы двоеточия указывается, соответственно, минута, прошу прощения, часы, минуты и секунды. И вот обратите внимание, что это как раз-таки время второй, второго Order ID у нас, и Redash, допустим, секунды не отображает. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "При работе с датами в Redash могут возникнуть следующие проблемы:\n\n1. Некорректное отображение формата даты: Redash может отображать даты в формате, отличном от ожидаемого. Например, вместо формата \"2022.1409\" Redash может использовать формат с разделителями или другой формат, что может вызывать путаницу при обработке результатов.\n\n2. Неполное отображение данных: Redash может не отображать определенные части даты, такие как секунды или полный год, что может создавать сложности при точном сравнении или фильтрации данных.\n\n3. Различные форматы даты в разных инструментах: Redash может использовать свой уникальный формат отображения даты, отличный от других инструментов. Это может вызвать проблемы при обработке и сравнении данных, если они были основаны на других ожидаемых форматах.\n\n4. Необходимость переформатирования дат: При использовании результатов из Redash в других системах запросов может потребоваться переформатирование даты для правильной обработки и сравнения. Это может требовать дополнительных действий и занимать время.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Как Redash визуально подкручивает данные и как это может повлиять на решение задач?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. Вот такая вот важная история, надеюсь, она пригодится вам при решении наших задачек и в работе может реально пригодиться и сэкономит вам, возможно, время для поиска ошибки, когда вы думаете, что там у вас уже округлено до двух знаков, а на самом деле просто, соответственно, этот Redash так сделал. Или когда в примере ожидаемого результата написана дата в формате 2022.1409, а Redash возвращает через эти слэши, и вы думаете, как бы мне там срочно переформатировать формат даты. Ничего страшного, просто помните, что на самом деле это Redash немного так подкручивает у себя чисто визуально данные, и просто можете теперь более аккуратно решать наши задачки. Перед тем, как двинуться дальше, давайте еще пару слов поговорим про Redash. Как я уже сказал, Redash — это, в целом, интерфейс, который позволяет более удобно работать с SQL-запросами. При этом ценность становится в сравнении. Например, мы могли бы писать SQL-запросы к нашей базе напрямую из командной строки, из терминала, и, как вы понимаете, это не самый удобный способ именно для аналитической работы. Забегая вперед, если вы когда-нибудь продвинетесь в своей карьерной траектории именно по направлению к дата-инжинирингу, к выстраиванию хранилищ, к какой-то более глубокой аналитике, когда требуется понимать вообще, как сами базы данных создаются, как они устроены, то работать вот из командной строки вам точно потребуется, но сейчас для нас это точно не оптимальный формат. Гораздо удобнее работать именно в такой более юзерфрендной среде, и Redash, разумеется, для этого подходит гораздо лучше.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=0f5YzgnobNA - Redash | Симулятор SQL | karpov.courses)",
        "response": "Redash визуально подкручивает данные, представляя их в формате, который может отличаться от реального формата хранения данных. Это может привести к неправильному пониманию исходных данных и затруднить решение задач, особенно если формат данных, отображаемый в Redash, отличается от ожидаемого формата. Например, это может привести к ошибкам округления или неправильному формату даты.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие преимущества может принести понимание особенностей хранения и форматирования данных в Redash?",
        "sourses": "Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный. И вот данные в самой базе данных в нашем постгрузе хранятся именно в таком формате. И когда вы дальше будете работать, например, с днями, чтобы отобрать только, допустим, 8 августа, 24 числа 2022 года, мы будем использовать запись именно вот такую. Redash при этом, если мы выведем данные, он отобразит их немножко иначе, и он просто, во-первых, не станет отображать секунды, во-вторых, соответственно, здесь у нас не отобразятся полный год, допустим. Но это именно Redash так отображает данные, и нет ничего странного в этом, потому что это нормально. Существует довольно много инструментов, которые как-то у себя в своем типе визуализации немного как-то там используют свои форматы. И вы на работе можете работать не в Redash, а в каких-нибудь других системах для написания запросов, и, возможно, они тоже будут как-то немножко форматировать результаты под себя. Более того, основываясь на сохраненных запросах, мы потом научимся их объединять в одни большие дашборды и визуализировать их данные, поэтому сохранять запросы удобно как с точки зрения обучения, вы никогда не потеряете ваш какой-то там прогресс, большие запросы, так и уже чисто для дальнейших предкладных аналитических задач. Это основные такие функции Redasha, про которые хотелось бы сказать, поэтому не забывайте, что вы всегда можете форматировать текст, вы можете либо включить, либо выключить автоподсказки, вы можете сохранять ваши большие запросы и потом работать с ними в дальнейшем, и вы можете всегда при необходимости выгружать результаты, которые вы получили, в текстовый формат, например, чтобы какую-то часть, допустим, аналитики проделать уже, скажем, в питоне.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)/nKarpov.courses: https://www.youtube.com/watch?v=0f5YzgnobNA - Redash | Симулятор SQL | karpov.courses)",
        "response": "Понимание особенностей хранения и форматирования данных в Redash позволяет:\n1. Более эффективно работать с данными, так как можно использовать правильные форматы и типы данных при написании запросов.\n2. Правильно интерпретировать отображаемую информацию, учитывая, что Redash может форматировать данные и скрывать некоторые детали (например, секунды или полный год).\n3. Удобно сохранять запросы и использовать их в дальнейшем, что помогает повысить производительность и сохранить прогресс.\n4. Легко визуализировать данные и создавать дашборды для аналитических задач.\n5. Возможность экспортировать результаты в текстовый формат для дальнейшей обработки, например, в питоне.",
        "faithfulness": true,
        "relevancy": true
    },
    {
        "question": "Какие ошибки можно избежать, зная о визуальной подстройке данных в Redash?",
        "sourses": "Вот, это просто важно помнить, что в задачках, например, вас часто будут просить округлить какую-нибудь метрику до двух знаков, и если вы увидите, что у вас в Redash как будто уже округлено, не верьте ему, на самом деле сделайте еще раз round, потому что на самом деле вы как бы отправите в нашу систему проверки не округленный до двух знаков, не соответственно не 1, там, да, 43, а вот 1, 42, 8, 5, 7 и так далее. И может не пройтись просто проверка на правильность. Вот, это два таких важных нюанса. Соответственно, важно понимать, что Redash может хранить данные немного иначе, чем это выглядит. И тоже, забегая уже вперед, мы на самом деле потом с вами научимся смотреть на то, как данные выглядят на самом деле. Вот здесь, вот в этом примере, например, Orders, тоже всегда можно было бы посмотреть, как у нас выглядит колоночка Creation Time, если бы мы просто перевели ее формат текстовый. Вот такая вот важная история, надеюсь, она пригодится вам при решении наших задачек и в работе может реально пригодиться и сэкономит вам, возможно, время для поиска ошибки, когда вы думаете, что там у вас уже округлено до двух знаков, а на самом деле просто, соответственно, этот Redash так сделал. Или когда в примере ожидаемого результата написана дата в формате 2022.1409, а Redash возвращает через эти слэши, и вы думаете, как бы мне там срочно переформатировать формат даты. Ничего страшного, просто помните, что на самом деле это Redash немного так подкручивает у себя чисто визуально данные, и просто можете теперь более аккуратно решать наши задачки. Перед тем, как мы двинемся дальше, хотел бы еще пару слов сказать про Redash и про то, как он отображает данные. Важно понимать, что сами наши данные, как я уже говорил, хранятся в специальной базе данных в PostgreSQL, а Redash — это некоторый инструмент, который позволяет как писать запросы в базу данных, так и получать и смотреть на результат. И вот здесь скроется некоторый нюанс, потому что то, как Redash отображает результат, далеко не всегда совпадает с тем, как данные хранятся на самом деле и в каком-то смысле, как они на самом деле выглядят. Сейчас поясню, что я имею в виду. Давайте начнем с такого момента, как Redash отображает время. Если мы просто выгрузим несколько строчек из таблички orders, мы увидим, что у нас есть колоночка с временем создания заказа, и здесь мы видим, что формат довольно такой необычный.",
        "video_sourse": "Karpov.courses: https://www.youtube.com/watch?v=kYcA_RVDNWM - Redash display | Симулятор SQL | karpov.courses)",
        "response": "Зная о визуальной подстройке данных в Redash, можно избежать следующих ошибок:\n\n1. Неправильного округления метрик до двух знаков после запятой. Важно помнить, что Redash может отображать данные с округлением, которое может отличаться от фактического округления. Поэтому всегда следует выполнять округление еще раз перед отправкой данных на проверку.\n\n2. Неправильного форматирования даты. Redash может отображать даты в своем собственном формате, который может отличаться от формата, заданного в примере ожидаемого результата. В таких случаях необходимо учитывать различия в форматах и соответствующим образом форматировать дату.\n\nЗная о визуальной подстройке данных в Redash, можно быть более внимательным и аккуратным при решении задач и избежать потенциальных ошибок, связанных с неправильным округлением или форматированием данных.",
        "faithfulness": true,
        "relevancy": true
    }
]